name: Build OpenWrt for JD BE6500 (IPQ5332)

on:
  workflow_dispatch:  # ÊâãÂä®Ëß¶Âèë
    inputs:
      with_wsdd2:
        description: 'ÁºñËØëÂåÖÂê´ WSDD2 (SMB3 ÊîØÊåÅ)'
        required: false
        default: 'false'
        type: boolean
      with_samba4:
        description: 'ÁºñËØëÂåÖÂê´ Samba4'
        required: false
        default: 'false'
        type: boolean
      with_docker:
        description: 'ÁºñËØëÂåÖÂê´ Docker ÊîØÊåÅ'
        required: false
        default: 'false'
        type: boolean
  release:
    types: published  # ÂèëÂ∏ÉReleaseÊó∂Ëß¶Âèë

env:
  LIENOL_REPO: https://github.com/Lienol/openwrt          # Lienol‰∏ª‰ªìÂ∫ì
  LIENOL_BRANCH: 23.05                                  # ‰ΩøÁî®23.05ÂàÜÊîØ
  ARCH: ipq807x                                          # ‰ΩøÁî®ipq807xÁõÆÊ†áÔºàÂÖºÂÆπIPQ5332Ôºâ
  SUBARCH: generic                                       # ÈÄöÁî®Â≠êÊû∂ÊûÑ
  CPU_ARCH: aarch64_cortex-a53                           # CPUÊû∂ÊûÑ
  FEEDS_CONF: feeds.conf.default                         # FeedsÈÖçÁΩÆÊñá‰ª∂
  CONFIG_FILE: .config                                   # ÁºñËØëÈÖçÁΩÆÊñá‰ª∂
  DIY_P1_SH: diy-part1.sh                                # Ëá™ÂÆö‰πâËÑöÊú¨1
  DIY_P2_SH: diy-part2.sh                                # Ëá™ÂÆö‰πâËÑöÊú¨2
  UPLOAD_BIN_DIR: false                                  # ‰∏ç‰∏ä‰º†binÁõÆÂΩï
  UPLOAD_FIRMWARE: true                                  # ‰∏ä‰º†Âõ∫‰ª∂
  UPLOAD_RELEASE: true                                   # ÂèëÂ∏ÉÂà∞Release
  UPLOAD_CDN: false                                      # ‰∏ä‰º†Âà∞CDN
  TZ: Asia/Shanghai                                      # Êó∂Âå∫
  GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}                  # GitHub Token
  CACHE_DIR: ${{ github.workspace }}/openwrt             # ÁºìÂ≠òÁõÆÂΩï
  OPENWRT_PATH: ${{ github.workspace }}/openwrt     

jobs:
  build:
    runs-on: ubuntu-22.04                                 # Áõ¥Êé•‰ΩøÁî®UbuntuÁéØÂ¢É

    steps:
    - name: ÂÆâË£ÖOpenWrtÁºñËØë‰æùËµñ
      run: |
        sudo apt-get update
        # ÂÆâË£ÖOpenWrtÂÆòÊñπÊé®ËçêÁöÑÁºñËØë‰æùËµñ
        sudo apt-get install -y build-essential ccache ecj fastjar file g++ gawk \
          gettext git java-propose-classpath libelf-dev libncurses5-dev \
          libncursesw5-dev libssl-dev python3 python3-distutils python3-setuptools \
          python3-dev rsync subversion swig time unzip wget xmlto zlib1g-dev \
          quilt autopoint libtool-bin gperf flex bison gettext-base asciidoc dos2unix
    - name: ÈÖçÁΩÆGitÂá≠ËØÅ
      run: |
        git config --global credential.helper store
        echo "https://${GITHUB_TOKEN}:@github.com" > ~/.git-credentials
        echo "GitÂá≠ËØÅÂ∑≤ÈÖçÁΩÆ"
    - name: ÂàõÂª∫ÁõÆÂΩï
      run: |
        mkdir -p $OPENWRT_PATH
    - name: clone‰ªìÂ∫ì
      uses: actions/checkout@v4
      with:
        path: .
    - name: ‰æùËµñÂº∫ÂåñÂÆâË£ÖÔºàËß£ÂÜ≥ÂéÜÂè≤Êä•ÈîôÔºâ
      run: |
        mkdir -p $OPENWRT_PATH && cd $OPENWRT_PATH
        rm .git -rf
        git clone https://github.com/openwrt/openwrt.git .
        # ÂÆâË£ÖFeedsÔºàÂ∏¶‰æùËµñ‰øÆÂ§çÔºâ
        ./scripts/feeds install -a 2>&1 | tee feeds_install.log
        
        # Ê£ÄÊµãÂπ∂ÂÆâË£ÖÁº∫Â§±ÁöÑÂÖ≥ÈîÆ‰æùËµñ
        MISSING_PACKAGES=()
        for pkg in libpam liblzma libnetsnmp; do
          if ! ./scripts/feeds list | grep -q $pkg; then
            MISSING_PACKAGES+=($pkg)
            echo "‚ö†Ô∏è Áº∫Â§±‰æùËµñ: $pkgÔºåÂ∞ùËØïÊâãÂä®Ê∑ªÂä†"
            
            # Ëá™Âä®ÂÖãÈöÜÁº∫Â§±ÁöÑÂåÖ
            if [ $pkg == "luci-app-samba" ]; then
              mkdir -p package/custom/luci
              git clone https://github.com/openwrt/luci.git package/custom/luci
            elif [ $pkg == "wsdd2" ]; then
              mkdir -p package/custom/wsdd2
              git clone https://github.com/small-5/wsdd2.git package/custom/wsdd2
            elif [ $pkg == "libpam" ]; then
              mkdir -p package/custom/packages
              git clone https://github.com/openwrt/packages.git package/custom/packages
            fi
          fi
        done
        
        if [ ${#MISSING_PACKAGES[@]} -gt 0 ]; then
          echo "ÂèëÁé∞ ${#MISSING_PACKAGES[@]} ‰∏™Áº∫Â§±‰æùËµñ: ${MISSING_PACKAGES[*]}"
          echo "ÈáçÊñ∞ÂÆâË£ÖFeeds..."
          ./scripts/feeds update -a
          ./scripts/feeds install -a
        else
          echo "‚úÖ ÊâÄÊúâ‰æùËµñÂ∑≤ÂÆâË£Ö"
        fi

        
      
        
       
    - name: ÁºñËØëÂõ∫‰ª∂ÔºàÂ∏¶ËØ¶ÁªÜÈîôËØØÊó•ÂøóÔºâ
      run: |
        make distclean
        make defconfig TARGET=ipq5332 TARGET_DEVICE=jd-be6500
        echo "ÂºÄÂßãÁºñËØëÂõ∫‰ª∂... (IPQ5332‰∏ìÁî®)"
        echo "‰ΩøÁî® $(nproc) Á∫øÁ®ãÁºñËØë..."
        
        # Á¨¨‰∏ÄÈò∂ÊÆµÔºöÂπ∂Ë°åÁºñËØë
        make -j$(nproc) V=s 2>&1 | tee compile_phase1.log
        PHASE1_STATUS=$?
        
        if [ $PHASE1_STATUS -ne 0 ]; then
          echo "‚ùå Âπ∂Ë°åÁºñËØëÂ§±Ë¥•ÔºåÂ∞ùËØïÂçïÁ∫øÁ®ãÁºñËØë..."
          # Á¨¨‰∫åÈò∂ÊÆµÔºöÂçïÁ∫øÁ®ãÁºñËØëÔºàËé∑ÂèñËØ¶ÁªÜÈîôËØØÔºâ
          make -j1 V=s 2>&1 | tee compile_phase2.log
          PHASE2_STATUS=$?
          
          if [ $PHASE2_STATUS -ne 0 ]; then
            echo "üí• ÁºñËØëÂΩªÂ∫ïÂ§±Ë¥•ÔºåÊî∂ÈõÜÈîôËØØÊó•Âøó..."
            # ÊèêÂèñÂÖ≥ÈîÆÈîôËØØ‰ø°ÊÅØ
            echo "=== ÁºñËØëÈîôËØØÊëòË¶Å ==="
            grep -E "error:|fatal:|make\[.*:.*Error\]" compile_phase2.log || true
            
            # ‰øùÂ≠òÂÆåÊï¥Êó•Âøó
            mkdir -p error_logs
            cp compile_phase*.log error_logs/
            cp $(find . -name "*.err" -or -name "*.log") error_logs/ 2>/dev/null
            tar -czf error_logs.tar.gz error_logs
            exit 1
          else
            echo "‚úÖ ÂçïÁ∫øÁ®ãÁºñËØëÊàêÂäü"
          fi
        else
          echo "‚úÖ Âπ∂Ë°åÁºñËØëÊàêÂäü"
        fi
    - name: Âõ∫‰ª∂ÂÆåÊï¥ÊÄßÊ£ÄÊü•ÔºàÁ≤æÂáÜÂÆö‰ΩçÁõÆÊ†áÁõÆÂΩïÔºâ
      run: |
        cd $OPENWRT_PATH
        # Âä®ÊÄÅÂÆö‰Ωçipq807xÁõÆÊ†áÁõÆÂΩï
        IPQ807X_DIR=$(find . -type d -name "ipq807x" 2>/dev/null)
        if [ -z "$IPQ807X_DIR" ]; then
          echo "‚ùå Êú™ÊâæÂà∞ipq807xÁõÆÊ†áÁõÆÂΩï"
          echo "ÂèØÁî®ÁõÆÊ†áÁõÆÂΩï:"
          find . -type d -name "*" | grep targets
          exit 1
        fi
        
        FIRMWARE_PATH="$IPQ807X_DIR/generic"
        if [ ! -d "$FIRMWARE_PATH" ]; then
          echo "‚ùå Êú™ÊâæÂà∞ipq807x/generic ÁõÆÂΩï"
          echo "ÂèØÁî®ÁõÆÂΩï:"
          find "$IPQ807X_DIR" -type d
          exit 1
        fi
        
        echo "FIRMWARE_PATH=$FIRMWARE_PATH" >> $GITHUB_ENV
        
        # Ê£ÄÊü•ÂÖ≥ÈîÆÂõ∫‰ª∂Êñá‰ª∂
        REQUIRED_FILES=(
          "openwrt-$ARCH-$SUBARCH-generic-jd-be6500-squashfs-sysupgrade.bin"
          "openwrt-$ARCH-$SUBARCH-generic-rootfs.tar.gz"
          "openwrt-$ARCH-$SUBARCH-generic-ext4-fsck"
        )
        
        MISSING_FILES=()
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$FIRMWARE_PATH/$file" ]; then
            MISSING_FILES+=($file)
          fi
        done
        
        if [ ${#MISSING_FILES[@]} -gt 0 ]; then
          echo "‚ùå ÂèëÁé∞Áº∫Â§±Âõ∫‰ª∂Êñá‰ª∂: ${MISSING_FILES[*]}"
          echo "ÂèØÁî®Êñá‰ª∂:"
          tree .
          ls -lh $FIRMWARE_PATH/* || true
          exit 1
        else
          echo "‚úÖ ÊâÄÊúâÂÖ≥ÈîÆÂõ∫‰ª∂Êñá‰ª∂Â∑≤ÁîüÊàê"
          ls -lh $FIRMWARE_PATH/*.bin
        fi
    - name: ÁîüÊàêÁâàÊú¨‰ø°ÊÅØ
      id: version
      run: |
        cd $OPENWRT_PATH
        RELEASE_DATE=$(date +%Y%m%d)
        COMMIT_ID=$(git rev-parse --short HEAD)
        BUILD_TIME=$(date +"%Y-%m-%d %H:%M:%S")
        BUILD_HOST=$(hostname)
        
        # ÁîüÊàêÁâàÊú¨‰ø°ÊÅØÊñá‰ª∂
        touch version.info
        echo "OpenWrt Âõ∫‰ª∂ for JD BE6500 (IPQ5332)" >> version.info
        echo "ÁºñËØëÊó∂Èó¥: $BUILD_TIME" >> version.info
        echo "ÁºñËØë‰∏ªÊú∫: $BUILD_HOST" >> version.info
        echo "Git Êèê‰∫§: $COMMIT_ID" >> version.info
        echo "Lienol ÂàÜÊîØ: $LIENOL_BRANCH" >> version.info
        echo "ÁõÆÊ†áÂπ≥Âè∞: $ARCH/$SUBARCH" >> version.info
        
        # ËæìÂá∫ÁâàÊú¨ÂèòÈáè
        echo "release_version=OpenWrt_${RELEASE_DATE}_${COMMIT_ID}" >> $GITHUB_ENV
        echo "release_version=OpenWrt_${RELEASE_DATE}_${COMMIT_ID}" >> $GITHUB_OUTPUT
        cat version.info
    - name: ‰∏ä‰º†Âõ∫‰ª∂Âà∞Artifact
      if: steps.version.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.release_version }}
        path: |
          ${{ env.FIRMWARE_PATH }}/*.bin
          ${{ env.FIRMWARE_PATH }}/*.tar.gz
          ${{ env.FIRMWARE_PATH }}/sha256sums
          version.info
        retention-days: 30
        if-no-files-found: error

    - name: ÂèëÂ∏ÉÂà∞GitHub Release
      if: steps.version.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ env.release_version }}
        tag_name: ${{ env.release_version }}
        body_path: version.info
        files: |
          ${{ env.FIRMWARE_PATH }}/*.bin
          ${{ env.FIRMWARE_PATH }}/*.tar.gz
          ${{ env.FIRMWARE_PATH }}/sha256sums
          version.info
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
